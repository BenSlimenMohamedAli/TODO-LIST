# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Activity {
  cd: String
  code: String
  denominazione: String
  descrizione: String
  group: String
  id: String
  macro: String
  note: String
}

type ActivityDate {
  day: Float!
  month: Float!
  year: Float!
}

type ActivityHistory {
  _id: String
  activity: Activity
  createdAt: DateTime
  date: DateTime
  folder: String
  group: Group
  hours: Float
  machinery: Machinery
  operator(populate: Boolean!): User
  product: Product
  quantity: Float
  updatedAt: DateTime
  validated: Boolean
}

input ActivityHistoryFilters {
  currentUser: String
  date: DateTime
  denominazione: String
  descrizione: String
  from: DateTime
  group: String
  operator: String
  to: DateTime
}

type ActivityHistoryListOutput {
  list: [ActivityHistory!]!
  pagination: paginationOutput!
}

type ActivityHistoryPerOperatorAndDayOutput {
  _id: ActivityOperatorAndDate!
  activities: Float!
  developmentTime: Float!
  machinery: Machinery
  maintenanceTime: Float!
  operator: User!
  product: Product
  productionTime: Float!
  quantity: Float
}

input ActivityInput {
  cd: String
  code: String
  denominazione: String
  descrizione: String
  group: String
  id: String
  macro: String
  note: String
}

type ActivityOperatorAndDate {
  date: ActivityDate!
  operator: String!
}

type ActivityStatisticsOutput {
  _id: ActivityDate!
  activities: Float!
  hours: Float!
}

input CreateActivityHistoryInput {
  activity: ActivityInput!
  date: DateTime
  folder: String
  hours: Float!
  machinery: MachineryInput
  product: ProductInput
}

input CreateActivityHistoryInputArray {
  activities: [CreateActivityHistoryInput!]!
  operator: String!
}

input CreateGroupInput {
  description: String!
  name: String!
}

input CreateUserInput {
  firstName: String!
  group: String
  lastName: String!
  matricule: Float!
  password: String!
  role: String!
  type: String!
  username: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Group {
  _id: String
  createdAt: DateTime
  description: String
  members: Float
  name: String
  updatedAt: DateTime
}

input GroupFilters {
  description: String
  name: String
}

type GroupListOutput {
  list: [Group!]!
  pagination: paginationOutput!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginOutput {
  _id: String!
  authorization: String!
  profile: User!
}

type Machinery {
  code: String
  description: String
}

input MachineryInput {
  code: String
  description: String
}

type Mutation {
  activity_history_create(activityHistories: CreateActivityHistoryInputArray!): Boolean!
  activity_history_delete(_id: String!): ActivityHistory!
  activity_history_update(activityHistory: UpdateActivityHistoryInput!): ActivityHistory!
  group_create(group: CreateGroupInput!): Group!
  group_delete(_id: String!): Boolean!
  group_update(group: UpdateGroupInput!): Boolean!
  login(credentials: LoginInput!): LoginOutput!
  user_create(user: CreateUserInput!): User!
  user_delete(_id: String!): Boolean!
  user_password_update(id: String!, passwords: UpdatePasswordInput!): Boolean!
  user_update(user: UpdateUserInput!): Boolean!
  user_update_profile_picture(old_picture_name: String!, picture: Upload!, user_id: String!): String!
}

input paginationInput {
  page: Float!
  size: Float!
}

type paginationOutput {
  page: Float!
  size: Float!
  total: Float!
  totalPages: Float!
}

type Product {
  code: String
  description: String
}

input ProductInput {
  code: String
  description: String
}

type Query {
  activity_history_all(filters: ActivityHistoryFilters): [ActivityHistory!]!
  activity_history_hours_per_date(filters: ActivityHistoryFilters): Float!
  activity_history_list(filters: ActivityHistoryFilters, pagination: paginationInput!): ActivityHistoryListOutput!
  activity_history_per_operator_and_day(filters: ActivityHistoryFilters): [ActivityHistoryPerOperatorAndDayOutput!]!
  activity_history_statistics(filters: ActivityHistoryFilters): [ActivityStatisticsOutput!]!
  group_list(filters: GroupFilters, pagination: paginationInput!): GroupListOutput!
  profile_details(userId: String): User!
  user_list(filters: UserFilters, pagination: paginationInput!): UserListOutput!
}

type TotalHours {
  perDay: Float
  perMonth: Float
  perWeek: Float
}

input UpdateActivityHistoryInput {
  _id: String!
  activity: ActivityInput!
  date: DateTime
  folder: String
  hours: Float!
  machinery: MachineryInput
  operator: String!
  product: ProductInput
}

input UpdateGroupInput {
  _id: String!
  description: String!
  name: String!
}

input UpdatePasswordInput {
  newPassword: String!
}

input UpdateUserInput {
  _id: String!
  firstName: String!
  group: String
  lastName: String!
  matricule: Float!
  role: String!
  type: String!
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: String
  createdAt: DateTime
  deleted: Boolean
  firstName: String
  gender: String
  group(populate: Boolean!): Group
  lastName: String
  matricule: Float
  password: String
  profilePicture: String
  role: String
  totalHours: TotalHours
  type: String
  updatedAt: DateTime
  username: String
}

input UserFilters {
  firstName: String
  group: String
  lastName: String
  role: String
  username: String
}

type UserListOutput {
  list: [User!]!
  pagination: paginationOutput!
}
